[project]
name = "muon-optimizer"
version = "0.1.0"
description = "Muon Optimizer: Accelerating Grokking Reproduction"
authors = [
    {name = "Bangyen Pham", email = "bangyen99@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "torch>=2.0.0",
    "numpy>=1.21.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "pandas>=1.3.0",
    "scipy>=1.7.0",
    "tqdm>=4.62.0",
    "plotly>=5.0.0",
    "jupyter>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov",
    "ruff",
    "mypy",
    "interrogate",
    "pre-commit",
    "types-PyYAML",
    "build",
    "twine",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[interrogate]
fail-under = 90
ignore-init-method = false
ignore-init-module = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-nested-functions = false
ignore-nested-classes = false
ignore-regex = ["^_"]
exclude = ["venv", ".git", "__pycache__", ".pytest_cache", "scripts"]

[tool.pytest.ini_options]
addopts = "-v --tb=short"
testpaths = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU support",
]
filterwarnings = [
    "ignore::DeprecationWarning:torch.*",
    "ignore::PendingDeprecationWarning:torch.*",
    "ignore::DeprecationWarning:numpy.*",
    "ignore::PendingDeprecationWarning:numpy.*",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 79
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Core linting rules
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "W",   # pycodestyle warnings
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "TCH", # flake8-type-checking
    "Q",   # flake8-quotes
    "N",   # pep8-naming
    "PLR", # pylint refactor
    "PLW", # pylint warnings
    "PLE", # pylint errors
    "RET", # flake8-return
    "SLF", # flake8-self
    "TID", # flake8-tidy-imports
    "ICN", # flake8-import-conventions
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
]
ignore = [
    "E501",  # line too long (handled by ruff format)
    "PLW2901", # Loop variable overwrites (common in ML code)
    "ARG001",  # Unused function arguments (some are required by APIs)
    "ARG002",  # Unused method arguments (some are required by APIs)
    "ARG005",  # Unused lambda arguments
    "N812",    # Lowercase imported as non-lowercase (allow common aliases)
    "C901",    # Function too complex (acceptable for complex ML algorithms)
    "PLR0912", # Too many branches (acceptable for training configs)
    "PLR0915", # Too many statements (acceptable for training loops)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"scripts/**/*.py" = [
    "PLR2004",  # Magic numbers acceptable in scripts
    "S101",     # Assert statements are acceptable in scripts
    "S311",     # Standard random generators are acceptable in scripts
    "BLE001",   # Blind exception catching is acceptable in scripts
]

# Type checking configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true  # More strict
disallow_incomplete_defs = true  # More strict
check_untyped_defs = true
disallow_untyped_decorators = false  # Relaxed for torch decorators
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
disallow_any_generics = true  # Stricter - disallow Any in generics
disallow_subclassing_any = false  # Relaxed for torch optimizers
disallow_untyped_calls = true  # Stricter - require type annotations
disallow_any_explicit = false  # Keep relaxed for configuration flexibility
disallow_any_unimported = false  # Relaxed for torch imports
no_implicit_reexport = true  # Stricter - require explicit re-exports
strict_optional = true  # Stricter - handle None properly

# Exclude script files from strict type checking
exclude = ["scripts/"]

# Add type annotations gradually to improve code quality
# Priority order:
# 1. Public APIs (functions in __init__.py)
# 2. Core algorithms (optimizer.py)
# 3. Model definitions (model.py)
# 4. Data processing (dataset.py)
# 5. Training loops (train_tasks.py)

# Example type annotations to add:
# - Function parameters and return types
# - Class attributes
# - Generic types for collections
# - Union types for optional parameters
